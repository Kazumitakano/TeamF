// Code generated by go-swagger; DO NOT EDIT.

package scenepicks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostCommentHandlerFunc turns a function with the right signature into a post comment handler
type PostCommentHandlerFunc func(PostCommentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCommentHandlerFunc) Handle(params PostCommentParams) middleware.Responder {
	return fn(params)
}

// PostCommentHandler interface for that can handle valid post comment params
type PostCommentHandler interface {
	Handle(PostCommentParams) middleware.Responder
}

// NewPostComment creates a new http.Handler for the post comment operation
func NewPostComment(ctx *middleware.Context, handler PostCommentHandler) *PostComment {
	return &PostComment{Context: ctx, Handler: handler}
}

/*PostComment swagger:route POST /dialog/{id}/comment postComment

PostComment post comment API

*/
type PostComment struct {
	Context *middleware.Context
	Handler PostCommentHandler
}

func (o *PostComment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostCommentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCommentBody post comment body
//
// swagger:model PostCommentBody
type PostCommentBody struct {

	// comment
	Comment string `json:"comment,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *PostCommentBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// comment
		Comment string `json:"comment,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Comment = props.Comment
	return nil
}

// Validate validates this post comment body
func (o *PostCommentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCommentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCommentBody) UnmarshalBinary(b []byte) error {
	var res PostCommentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

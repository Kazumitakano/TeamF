// Code generated by go-swagger; DO NOT EDIT.

package scenepicks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/shortintern2020-C-cryptograph/TeamF/server/gen/models"
)

// GetTagHandlerFunc turns a function with the right signature into a get tag handler
type GetTagHandlerFunc func(GetTagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTagHandlerFunc) Handle(params GetTagParams) middleware.Responder {
	return fn(params)
}

// GetTagHandler interface for that can handle valid get tag params
type GetTagHandler interface {
	Handle(GetTagParams) middleware.Responder
}

// NewGetTag creates a new http.Handler for the get tag operation
func NewGetTag(ctx *middleware.Context, handler GetTagHandler) *GetTag {
	return &GetTag{Context: ctx, Handler: handler}
}

/*GetTag swagger:route GET /tag getTag

GetTag get tag API

*/
type GetTag struct {
	Context *middleware.Context
	Handler GetTagHandler
}

func (o *GetTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTagParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTagOKBody get tag o k body
//
// swagger:model GetTagOKBody
type GetTagOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// schema
	Schema []*models.Tag `json:"schema"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *GetTagOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// message
		Message string `json:"message,omitempty"`

		// schema
		Schema []*models.Tag `json:"schema"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Message = props.Message
	o.Schema = props.Schema
	return nil
}

// Validate validates this get tag o k body
func (o *GetTagOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTagOKBody) validateSchema(formats strfmt.Registry) error {

	if swag.IsZero(o.Schema) { // not required
		return nil
	}

	for i := 0; i < len(o.Schema); i++ {
		if swag.IsZero(o.Schema[i]) { // not required
			continue
		}

		if o.Schema[i] != nil {
			if err := o.Schema[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTagOK" + "." + "schema" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTagOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTagOKBody) UnmarshalBinary(b []byte) error {
	var res GetTagOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

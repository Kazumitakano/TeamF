// Code generated by go-swagger; DO NOT EDIT.

package scenepicks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/shortintern2020-C-cryptograph/TeamF/server/gen/models"
)

// PostCommentBadRequestCode is the HTTP code returned for type PostCommentBadRequest
const PostCommentBadRequestCode int = 400

/*PostCommentBadRequest request error

swagger:response postCommentBadRequest
*/
type PostCommentBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostCommentBadRequest creates PostCommentBadRequest with default headers values
func NewPostCommentBadRequest() *PostCommentBadRequest {

	return &PostCommentBadRequest{}
}

// WithPayload adds the payload to the post comment bad request response
func (o *PostCommentBadRequest) WithPayload(payload models.Error) *PostCommentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post comment bad request response
func (o *PostCommentBadRequest) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCommentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostCommentInternalServerErrorCode is the HTTP code returned for type PostCommentInternalServerError
const PostCommentInternalServerErrorCode int = 500

/*PostCommentInternalServerError internal serever error

swagger:response postCommentInternalServerError
*/
type PostCommentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostCommentInternalServerError creates PostCommentInternalServerError with default headers values
func NewPostCommentInternalServerError() *PostCommentInternalServerError {

	return &PostCommentInternalServerError{}
}

// WithPayload adds the payload to the post comment internal server error response
func (o *PostCommentInternalServerError) WithPayload(payload models.Error) *PostCommentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post comment internal server error response
func (o *PostCommentInternalServerError) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCommentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*PostCommentDefault generic error response

swagger:response postCommentDefault
*/
type PostCommentDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostCommentDefault creates PostCommentDefault with default headers values
func NewPostCommentDefault(code int) *PostCommentDefault {
	if code <= 0 {
		code = 500
	}

	return &PostCommentDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post comment default response
func (o *PostCommentDefault) WithStatusCode(code int) *PostCommentDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post comment default response
func (o *PostCommentDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post comment default response
func (o *PostCommentDefault) WithPayload(payload models.Error) *PostCommentDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post comment default response
func (o *PostCommentDefault) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCommentDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

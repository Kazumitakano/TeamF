// Code generated by go-swagger; DO NOT EDIT.

package scenepicks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostToTwitterHandlerFunc turns a function with the right signature into a post to twitter handler
type PostToTwitterHandlerFunc func(PostToTwitterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostToTwitterHandlerFunc) Handle(params PostToTwitterParams) middleware.Responder {
	return fn(params)
}

// PostToTwitterHandler interface for that can handle valid post to twitter params
type PostToTwitterHandler interface {
	Handle(PostToTwitterParams) middleware.Responder
}

// NewPostToTwitter creates a new http.Handler for the post to twitter operation
func NewPostToTwitter(ctx *middleware.Context, handler PostToTwitterHandler) *PostToTwitter {
	return &PostToTwitter{Context: ctx, Handler: handler}
}

/*PostToTwitter swagger:route GET /twitter postToTwitter

PostToTwitter post to twitter API

*/
type PostToTwitter struct {
	Context *middleware.Context
	Handler PostToTwitterHandler
}

func (o *PostToTwitter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostToTwitterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostToTwitterOKBody post to twitter o k body
//
// swagger:model PostToTwitterOKBody
type PostToTwitterOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *PostToTwitterOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// message
		Message string `json:"message,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Message = props.Message
	return nil
}

// Validate validates this post to twitter o k body
func (o *PostToTwitterOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostToTwitterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostToTwitterOKBody) UnmarshalBinary(b []byte) error {
	var res PostToTwitterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
